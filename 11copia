<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Punto de Venta Arelyshop</title>
    <link rel="icon" href="https://www.svgrepo.com/show/373594/favicon.svg" type="image/svg+xml">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- jsPDF, html2canvas, and jsPDF-AutoTable for PDF generation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        /* Custom styles for the Inter font and general layout */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
        }
        #receipt {
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
        }
        /* Ensure input fields in the table are responsive */
        .product-table input {
            width: 100%;
            min-width: 60px; /* Minimum width to prevent collapsing */
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
        }
        /* Style for the delete button in the table */
        .delete-row-btn {
            color: #ef4444; /* Red color */
            background: transparent;
            border: none;
            cursor: pointer;
            font-weight: bold;
            padding: 0.5rem;
        }
        .delete-row-btn:hover {
            color: #b91c1c; /* Darker red on hover */
        }
        /* Class to replace inputs for PDF */
        .pdf-text-replacement {
            padding: 0.5rem;
            display: inline-block;
            min-height: 2.5rem; /* Match input height */
            vertical-align: middle;
        }
        /* Transition for the collapsible sections */
        #configSection, #productSearchSection {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-in-out;
        }
        #configSection.open, #productSearchSection.open {
            max-height: 1000px; /* Adjust as needed, can be a large value */
        }
        .copy-btn {
            background-color: #e5e7eb;
            border: none;
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 8px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .copy-btn:hover {
            background-color: #d1d5db;
        }
        
        /* Styles for Forms */
        .form-container {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        .form-title {
            color: #111827;
        }
        .form-input {
            transition: all 0.3s ease;
        }
        .form-input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
        }
        .submit-btn {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .submit-btn:hover {
            background-color: #1d4ed8;
        }
        .submit-btn:active {
            transform: scale(0.98);
        }
        #status-message {
            transition: opacity 0.5s ease-in-out;
        }
    </style>
</head>
<body class="bg-f0f2f5">
    <!-- Login Screen -->
    <div id="login-screen" class="fixed inset-0 bg-slate-900 flex items-center justify-center z-50">
        <div class="w-full max-w-sm p-8 bg-white rounded-2xl shadow-xl">
            <div class="text-center mb-6">
                <div class="bg-slate-900 rounded-lg p-4 inline-block mb-4">
                    <img src="https://dcdn-us.mitiendanube.com/stores/004/546/736/themes/common/logo-660776128-1736645739-9bb5db1715d3b799cdf782b0f0815d541736645739.webp?0" 
                         alt="Logo ArelyShop" 
                         class="h-12"
                         onerror="this.onerror=null; this.src='https://placehold.co/200x50/0f172a/ffffff?text=ArelyShop';">
                </div>
                 <div class="flex justify-center mb-4">
                   <svg xmlns="http://www.w3.org/2000/svg" height="48px" viewBox="0 -960 960 960" width="48px" fill="#1e293b"><path d="M480-120v-80h280v-560H480v-80h280q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H480Zm-80-160-55-58 102-102H120v-80h327L345-622l55-58 200 200-200 200Z"/></svg>
                </div>
                <h1 class="text-2xl font-bold text-gray-800">Iniciar Sesión</h1>
            </div>
            <form id="login-form">
                <div class="mb-4">
                    <label for="username" class="block text-sm font-medium text-gray-600 mb-1">Usuario</label>
                    <input type="text" id="username" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <div class="mb-6">
                    <label for="password" class="block text-sm font-medium text-gray-600 mb-1">Contraseña</label>
                    <input type="password" id="password" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                </div>
                <button type="submit" class="w-full py-3 bg-blue-600 text-white font-bold rounded-lg hover:bg-blue-700 transition duration-200">
                    Ingresar
                </button>
                <p id="login-error" class="text-sm text-red-500 text-center mt-4"></p>
            </form>
        </div>
    </div>

    <!-- Main App Content (Initially Hidden) -->
    <div id="app-content" style="display: none;" class="flex flex-col min-h-screen">
        <!-- Header with Logo -->
        <header class="bg-slate-900 p-4 shadow-md sticky top-0 z-40">
            <div class="max-w-4xl mx-auto flex justify-between items-center relative">
                <img src="https://dcdn-us.mitiendanube.com/stores/004/546/736/themes/common/logo-660776128-1736645739-9bb5db1715d3b799cdf782b0f0815d541736645739.webp?0" 
                     alt="Logo ArelyShop" 
                     class="h-12 cursor-pointer" id="logo-home-btn"
                     onerror="this.onerror=null; this.src='https://placehold.co/200x50/0f172a/ffffff?text=ArelyShop';">
                
                <div class="flex items-center gap-2">
                    <!-- Refresh Button -->
                    <button id="refreshProductsBtn" title="Actualizar base de datos" class="p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition duration-200 flex-shrink-0">
                        <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="#e3e3e3"><path d="M204-318q-22-38-33-78t-11-82q0-134 93-228t227-94h7l-64-64 56-56 160 160-160 160-56-56 64-64h-7q-100 0-170 70.5T240-478q0 26 6 51t18 49l-60 60ZM481-40 321-200l160-160 56 56-64 64h7q100 0 170-70.5T720-482q0-26-6-51t-18-49l60-60q22 38 33 78t11 82q0 134-93 228t-227 94h-7l64 64-56 56Z"/></svg>
                    </button>

                    <!-- Mobile Menu Button -->
                    <div class="md:hidden">
                        <button id="mobileMenuBtn" class="text-white p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                            </svg>
                        </button>
                    </div>

                    <!-- Menu Items -->
                    <div id="headerMenu" class="hidden md:flex absolute md:static top-full right-0 mt-2 md:mt-0 bg-slate-800 md:bg-transparent p-4 md:p-0 rounded-lg shadow-lg md:shadow-none w-48 md:w-auto z-50">
                        <div class="flex flex-col md:flex-row items-center gap-4 w-full">
                            <button id="fullscreenBtn" title="Pantalla Completa" class="p-2 bg-gray-600 text-white rounded-full hover:bg-gray-700 transition duration-200 flex-shrink-0">
                                <svg id="fullscreenIcon" class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="#e3e3e3"><path d="M800-600v-120H680v-80h120q33 0 56.5 23.5T880-720v120h-80Zm-720 0v-120q0-33 23.5-56.5T160-800h120v80H160v120H80Zm600 440v-80h120v-120h80v120q0 33-23.5 56.5T800-160H680Zm-520 0q-33 0-56.5-23.5T80-240v-120h80v120h120v80H160Zm80-160v-320h480v320H240Zm80-80h320v-160H320v160Zm0 0v-160 160Z"/></svg>
                                <svg id="exitFullscreenIcon" class="w-5 h-5 hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="#e3e3e3"><path d="M800-600v-120H680v-80h120q33 0 56.5 23.5T880-720v120h-80Zm-720 0v-120q0-33 23.5-56.5T160-800h120v80H160v120H80Zm600 440v-80h120v-120h80v120q0 33-23.5 56.5T800-160H680Zm-520 0q-33 0-56.5-23.5T80-240v-120h80v120h120v80H160Zm80-160v-320h480v320H240Zm80-80h320v-160H320v160Zm0 0v-160 160Z"/></svg>
                            </button>
                            <button id="showRegisterPageBtn" title="Registrar Nuevo Producto" class="p-2 bg-green-600 text-white rounded-full hover:bg-green-700 transition duration-200 flex-shrink-0" style="display: none;">
                                 <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="#e3e3e3"><path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/></svg>
                            </button>
                            <button id="showReportsPageBtn" title="Reporte de Ventas" class="p-2 bg-purple-600 text-white rounded-full hover:bg-purple-700 transition duration-200 flex-shrink-0" style="display: none;">
                                 <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3"><path d="M200-120q-33 0-56.5-23.5T120-200v-640h80v640h640v80H200Zm40-120v-360h160v360H240Zm200 0v-560h160v560H440Zm200 0v-200h160v200H640Z"/></svg>
                            </button>
                            <button id="logoutBtn" title="Cerrar Sesión" class="p-2 bg-red-600 text-white rounded-full hover:bg-red-700 transition duration-200 flex-shrink-0">
                               <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e3e3e3"><path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h280v80H200Zm440-160-55-58 102-102H360v-80h327L585-622l55-58 200 200-200 200Z"/></svg>
                            </button>
                            <div class="text-white text-right mt-4 md:mt-0 md:ml-4 border-t md:border-none pt-4 md:pt-0">
                                <p class="text-sm">Usuario: <span id="loggedInUserDisplay"></span></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <main class="p-4 md:p-8 flex-grow">
            <!-- Point of Sale Page -->
            <div id="pos-page">
                <div class="max-w-4xl mx-auto">
                    <h1 class="text-3xl font-extrabold text-gray-900 mb-6 text-center">
                        Punto de Venta Arelyshop
                    </h1>

                    <!-- Toggle Button for Google Sheets Config (Admin only) -->
                    <div id="config-toggle-container" class="mb-4" style="display: none;">
                        <button id="toggleConfigBtn" class="w-full flex justify-center items-center px-5 py-3 bg-white text-gray-700 font-semibold rounded-lg shadow-md hover:bg-gray-50 transition duration-200">
                            <span>Configuración de Google Sheets</span>
                            <svg id="arrowIcon" class="w-5 h-5 ml-2 transition-transform transform" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                        </button>
                    </div>

                    <!-- Google Sheets Integration Section (Collapsible) -->
                    <div id="configSection">
                        <div class="bg-white p-6 rounded-lg shadow-md mb-8 space-y-4">
                            <div>
                                <h2 class="text-lg font-semibold text-gray-800 mb-3">1. Cargar Productos desde Google Sheets</h2>
                                <div class="flex flex-col sm:flex-row gap-2">
                                    <input type="url" id="googleSheetUrl" placeholder="Pega aquí el enlace .csv de tus productos" class="flex-grow p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" value="https://docs.google.com/spreadsheets/d/e/2PACX-1vSrMzpuvP21XOWBrZ4rWCh7muc5La59EhFSlpf3XassN0Vobmjo-T-x2tC4_OZnuC1fr5ebkbsvjjnP/pub?output=csv">
                                    <button id="loadProductsBtn" class="px-5 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200">Cargar Productos</button>
                                </div>
                                <p id="loadingStatus" class="text-sm text-gray-500 mt-2"></p>
                            </div>
                            <div>
                                <h2 class="text-lg font-semibold text-gray-800 mb-3">2. Guardar Ventas en Google Sheets</h2>
                                <p class="text-sm text-gray-600 mb-2">URL de tu aplicación web para guardar el historial de ventas.</p>
                                <input type="url" id="salesApiUrl" placeholder="Pega aquí la URL de tu aplicación web" class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" value="https://script.google.com/macros/s/AKfycbxI8Y5LwtUOfTupr9NgkoeiCaWCCae7uBJq12jxjJSCtqCOulTmhutQv1OvJKs_wBdy/exec">
                                <p id="savingStatus" class="text-sm text-gray-500 mt-2"></p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Toggle Button for Product Search -->
                    <div class="mb-4">
                        <button id="toggleSearchBtn" class="w-full flex justify-center items-center px-5 py-3 bg-white text-gray-700 font-semibold rounded-lg shadow-md hover:bg-gray-50 transition duration-200">
                            <span>Buscador de Productos</span>
                            <svg id="searchArrowIcon" class="w-5 h-5 ml-2 transition-transform transform" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                        </button>
                    </div>

                    <!-- Product Search Section (Collapsible) -->
                    <div id="productSearchSection">
                        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                            <h2 class="text-2xl font-bold text-gray-800 mb-4">Buscar Productos</h2>
                            <div class="mb-4">
                                <input type="text" id="productSearchInput" placeholder="Buscar por Nombre, SKU o Código..." class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div id="productSearchResults" class="max-h-[60vh] overflow-y-auto grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-2">
                                <!-- Search results will be dynamically inserted here -->
                            </div>
                        </div>
                    </div>

                    <!-- Actions Section -->
                    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 items-start">
                            <!-- New Sale -->
                            <div class="md:col-span-1">
                                <h2 class="text-lg font-semibold text-gray-800 mb-3">Nueva Venta</h2>
                                <button id="newSaleBtn" class="w-full px-5 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 flex items-center justify-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>
                                    Limpiar y Empezar
                                </button>
                            </div>
                            <!-- Search -->
                            <div class="md:col-span-2">
                                <h2 class="text-lg font-semibold text-gray-800 mb-3">Reimprimir Nota de Venta</h2>
                                <div class="flex flex-col sm:flex-row gap-2">
                                    <input type="number" id="searchSaleInput" placeholder="Introduce el Nr. de Venta" class="flex-grow p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                    <button id="searchSaleBtn" class="px-5 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition duration-200">Buscar</button>
                                </div>
                                <p id="searchStatus" class="text-sm text-gray-500 mt-2"></p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Receipt Container -->
                    <div id="receipt" class="bg-white rounded-lg overflow-hidden">
                        <!-- Receipt Header -->
                        <div id="receiptHeader" class="bg-slate-900 text-white flex flex-col sm:flex-row justify-between items-start sm:items-center p-6 gap-4">
                            <div class="flex items-center">
                                <img id="receiptLogo" src="https://dcdn-us.mitiendanube.com/stores/004/546/736/themes/common/logo-660776128-1736645739-9bb5db1715d3b799cdf782b0f0815d541736645739.webp?0" alt="Logo" class="h-10 mr-4" crossorigin="anonymous" onerror="this.onerror=null; this.src='https://placehold.co/100x40/ffffff/000000?text=Logo';">
                                <div>
                                    <h2 class="text-xl font-bold">ArelyShop</h2>
                                    <p class="text-sm text-slate-300">Santa Cruz de la Sierra, Bolivia</p>
                                </div>
                            </div>
                            <div class="text-left sm:text-right mt-4 sm:mt-0">
                                <p class="text-lg font-semibold" id="receiptTitle">Nota de Venta</p>
                                <p id="saleNumberLine" class="text-sm text-slate-300"><strong>Nr:</strong> <span id="saleNumber">...</span></p>
                                <p id="quoteValidityLine" class="text-sm text-slate-300" style="display: none;"><strong>Validez:</strong> 24 horas</p>
                                <p class="text-sm text-slate-300"><strong>Fecha:</strong> <span id="currentDate"></span></p>
                            </div>
                        </div>
                        
                        <div class="p-6">
                            <!-- Customer Info -->
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                <div>
                                    <label for="clientName" class="block text-sm font-medium text-gray-700">Nombre del Cliente:</label>
                                    <input type="text" id="clientName" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm p-2">
                                </div>
                                <div>
                                    <label for="clientPhone" class="block text-sm font-medium text-gray-700">Teléfono:</label>
                                    <input type="text" id="clientPhone" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm p-2">
                                </div>
                                <div>
                                    <label for="clientNit" class="block text-sm font-medium text-gray-700">NIT o CI:</label>
                                    <input type="text" id="clientNit" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm p-2">
                                </div>
                            </div>

                            <!-- Products Table -->
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200 product-table">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cant.</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/3">Producto</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">SKU</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Código</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Costo Unit.</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Desc. (%)</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider action-col"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="product-rows" class="bg-white divide-y divide-gray-200">
                                        <!-- Product rows will be inserted here by JavaScript -->
                                    </tbody>
                                </table>
                                <datalist id="productList"></datalist>
                            </div>
                            <button id="addProductBtn" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition duration-200 text-sm">+ Añadir Producto</button>

                            <!-- Totals Section -->
                            <div class="flex justify-end mt-6">
                                <div class="w-full max-w-xs">
                                    <div class="flex justify-between text-gray-700">
                                        <span>Subtotal:</span>
                                        <span id="subtotal">Bs. 0.00</span>
                                    </div>
                                    <div class="flex justify-between font-bold text-xl text-gray-900 mt-2 pt-2 border-t">
                                        <span>MONTO TOTAL:</span>
                                        <span id="grandTotal">Bs. 0.00</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Footer -->
                            <div class="text-center border-t mt-8 pt-4">
                                <p class="text-gray-700 font-semibold">¡Gracias por su compra!</p>
                                <p class="text-sm text-gray-500">
                                    Visita nuestra tienda online: 
                                    <a href="https://arelyshopbo.mitiendanube.com/productos/" target="_blank" class="text-blue-600 hover:underline">arelyshopbo.mitiendanube.com</a>
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="text-center mt-8 space-y-4 md:space-y-0 md:space-x-4 md:flex md:justify-center">
                        <button id="downloadQuoteBtn" class="w-full md:w-auto px-8 py-3 bg-gray-500 text-white font-bold rounded-lg hover:bg-gray-600 transition duration-200 shadow-lg flex items-center justify-center">
                            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                            Descargar Cotización (PDF)
                        </button>
                        <button id="downloadPdfBtn" class="w-full md:w-auto px-8 py-3 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 transition duration-200 shadow-lg flex items-center justify-center">
                            <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg>
                            Generar Venta y Descargar PDF
                        </button>
                    </div>

                    <!-- QR Section -->
                    <div id="qr-section" class="mt-8 flex flex-col items-center">
                        <div class="bg-white rounded-lg shadow-md p-6 text-center w-[500px] h-[500px] max-w-[90vw] max-h-[90vw] flex flex-col justify-center items-center">
                            <h3 class="text-xl font-bold text-gray-800 mb-4 flex-shrink-0">Escanea y paga</h3>
                            <div class="w-full h-full flex-grow">
                                <img src="https://lh3.googleusercontent.com/d/12I70V-iLavoALoXZW9OyeI2zSXKXQcKb=w800?authuser=0" alt="Código QR para pago" class="w-full h-full object-contain" crossorigin="anonymous" onerror="this.onerror=null; this.src='https://placehold.co/500x500/ffffff/000000?text=QR+Error';">
                            </div>
                        </div>
                        <div class="flex flex-col sm:flex-row gap-4 mt-6">
                             <a href="https://arelyshopbo.mitiendanube.com/productos/" target="_blank" class="px-6 py-3 bg-pink-500 text-white font-bold rounded-lg hover:bg-pink-600 transition duration-200 shadow-lg flex items-center justify-center">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                                Tienda Online
                            </a>
                            <a href="https://megapelis1997cgm.github.io/medidas/" target="_blank" class="px-6 py-3 bg-indigo-500 text-white font-bold rounded-lg hover:bg-indigo-600 transition duration-200 shadow-lg flex items-center justify-center">
                               <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                Herramientas de Diseño
                            </a>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Register Product Page (hidden by default) -->
            <div id="register-page" class="hidden">
                <div class="form-container">
                    <div class="text-center mb-8">
                        <h1 class="text-3xl font-bold form-title">Registrar Nuevo Producto</h1>
                        <p class="text-gray-500 mt-2">Completa el formulario para añadir un item al inventario.</p>
                    </div>

                    <form id="product-form">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Campo Nombre -->
                            <div class="md:col-span-2">
                                <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre del Producto</label>
                                <input type="text" id="nombre" name="nombre" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input" required>
                            </div>
                            
                            <!-- Campo Precio -->
                            <div>
                                <label for="precio" class="block text-sm font-medium text-gray-700 mb-1">Precio (Venta)</label>
                                <input type="number" step="0.01" id="precio" name="precio" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input" required>
                            </div>
                            
                            <!-- Campo Compra -->
                            <div>
                                <label for="compra" class="block text-sm font-medium text-gray-700 mb-1">Precio (Compra)</label>
                                <input type="number" step="0.01" id="compra" name="compra" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input" required>
                            </div>

                            <!-- Campo Mayoreo -->
                            <div>
                                <label for="mayoreo" class="block text-sm font-medium text-gray-700 mb-1">Precio (Mayoreo)</label>
                                <input type="number" step="0.01" id="mayoreo" name="mayoreo" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>

                            <!-- Campo Cantidad -->
                            <div>
                                <label for="cantidad" class="block text-sm font-medium text-gray-700 mb-1">Cantidad</label>
                                <input type="number" id="cantidad" name="cantidad" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input" required>
                            </div>

                            <!-- Campo SKU -->
                            <div class="md:col-span-2">
                                <label for="sku" class="block text-sm font-medium text-gray-700 mb-1">SKU</label>
                                <input type="text" id="sku" name="sku" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>
                            
                            <!-- Campo Foto 1 -->
                            <div class="md:col-span-2">
                                <label for="foto1" class="block text-sm font-medium text-gray-700 mb-1">URL de Foto 1</label>
                                <input type="url" id="foto1" name="foto1" placeholder="https://ejemplo.com/imagen.jpg" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>

                            <!-- Campo Code -->
                            <div class="md:col-span-2">
                                <label for="code" class="block text-sm font-medium text-gray-700 mb-1">Código de Barras (Code)</label>
                                <input type="text" id="code" name="code" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>
                        </div>

                        <!-- Botón de Envío -->
                        <div class="mt-8 text-center">
                            <button type="submit" id="submit-button" class="w-full md:w-auto px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md submit-btn focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Registrar Producto
                            </button>
                        </div>
                    </form>

                    <!-- Mensaje de Estado (éxito o error) -->
                    <div id="status-message" class="mt-6 p-4 text-center rounded-lg opacity-0"></div>
                    
                    <!-- Botón para volver al POS -->
                    <div class="mt-8 text-center border-t pt-6">
                         <button id="backToPosBtn" class="text-blue-600 hover:underline">← Volver al Punto de Venta</button>
                    </div>
                </div>
            </div>
             <!-- Reports Page (hidden by default) -->
            <div id="reports-page" class="hidden">
                 <div class="max-w-4xl mx-auto">
                    <!-- Monthly Summary Section -->
                    <div id="monthly-summary" class="mb-8 p-6 bg-white rounded-lg shadow-md">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-2xl font-bold text-gray-800">Resumen de <span id="summary-month-name"></span></h2>
                            <div class="flex space-x-2">
                                <button id="prev-month-summary-btn" class="px-3 py-1 text-sm bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Mes Anterior</button>
                                <button id="current-month-summary-btn" class="px-3 py-1 text-sm bg-blue-500 text-white rounded-md">Mes Actual</button>
                            </div>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- Totals -->
                            <div class="space-y-4">
                                <div class="p-4 bg-blue-50 rounded-lg">
                                    <p class="text-sm font-medium text-blue-800">Total Vendido</p>
                                    <p id="summary-total-sales" class="text-2xl font-bold text-blue-900">Calculando...</p>
                                </div>
                                <div class="p-4 bg-green-50 rounded-lg">
                                    <p class="text-sm font-medium text-green-800">Ganancia Total</p>
                                    <p id="summary-total-profit" class="text-2xl font-bold text-green-900">Calculando...</p>
                                </div>
                            </div>
                            <!-- Top Products -->
                            <div class="p-4 bg-gray-50 rounded-lg">
                                <h3 class="text-sm font-medium text-gray-800 mb-2">Top 5 Productos Más Vendidos</h3>
                                <ol id="summary-top-products" class="list-decimal list-inside space-y-1 text-gray-700">
                                    <li>Calculando...</li>
                                </ol>
                            </div>
                        </div>
                    </div>

                    <div class="form-container">
                        <div class="text-center mb-8">
                            <h1 class="text-3xl font-bold form-title">Generar Reporte de Ventas</h1>
                            <p class="text-gray-500 mt-2">Selecciona un rango de fechas para generar el reporte.</p>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                            <div>
                                <label for="startDate" class="block text-sm font-medium text-gray-700 mb-1">Fecha de Inicio</label>
                                <input type="date" id="startDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>
                            <div>
                                <label for="endDate" class="block text-sm font-medium text-gray-700 mb-1">Fecha de Fin</label>
                                <input type="date" id="endDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm form-input">
                            </div>
                        </div>
                        
                        <div class="text-center">
                            <button id="generateReportBtn" class="w-full md:w-auto px-8 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-md submit-btn focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                                Generar Reporte
                            </button>
                        </div>

                        <div class="mt-8 text-center border-t pt-6">
                            <button id="backToPosBtnFromReports" class="text-blue-600 hover:underline">← Volver al Punto de Venta</button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <footer class="bg-slate-900 text-white text-center p-4 mt-8">
            <p id="footer-text" class="text-sm"></p>
        </footer>
    </div>

    <!-- Report Modal -->
    <div id="reportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
            <h2 id="reportTitle" class="text-2xl font-bold mb-4 text-center">Reporte de Ventas</h2>
            <div id="reportContent" class="overflow-y-auto">
                <!-- Report table will be generated here -->
            </div>
            <div class="text-center mt-6 flex justify-center gap-4">
                <button id="downloadReportBtn" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">Descargar Reporte PDF</button>
                <button id="closeReportModal" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Cerrar</button>
            </div>
        </div>
    </div>
    
    <!-- Product Detail Modal -->
    <div id="productDetailModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white p-6 rounded-lg shadow-xl max-w-3xl w-full relative flex flex-col md:flex-row gap-6 max-h-[90vh]">
            <button id="closeProductModal" class="absolute top-3 right-3 text-gray-500 hover:text-gray-800 text-3xl font-bold z-10">×</button>
            <div class="md:w-1/2 flex items-center justify-center bg-gray-100 rounded-lg">
                 <img id="modalProductImage" src="" alt="Vista detallada del producto" class="w-full h-auto max-h-[80vh] object-contain rounded-lg">
            </div>
            <div class="md:w-1/2 flex flex-col py-4 overflow-y-auto">
                <h2 id="modalProductName" class="text-2xl font-bold text-gray-900 mb-4"></h2>
                <div class="space-y-3 text-gray-700 text-base">
                    <p class="flex items-center justify-between"><strong>SKU:</strong> <span class="bg-gray-100 px-2 py-1 rounded"><span id="modalProductSku"></span> <button class="copy-btn" data-copy-type="modal-sku" title="Copiar SKU"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16"><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg></button></span></p>
                    <p class="flex items-center justify-between"><strong>Código:</strong> <span class="bg-gray-100 px-2 py-1 rounded"><span id="modalProductCode"></span> <button class="copy-btn" data-copy-type="modal-code" title="Copiar Código"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" viewBox="0 0 16 16"><path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/><path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/></svg></button></span></p>
                    <p><strong>Stock:</strong> <span id="modalProductStock" class="font-semibold"></span></p>
                    <div class="mt-4 pt-4 border-t space-y-2">
                        <p class="flex justify-between"><strong>Precio:</strong> <span id="modalProductPrice" class="font-semibold text-lg text-blue-600"></span></p>
                        <p class="flex justify-between"><strong>Costo:</strong> <span id="modalProductCost" class="font-semibold"></span></p>
                        <p class="flex justify-between"><strong>Mayoreo:</strong> <span id="modalProductWholesale" class="font-semibold"></span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // --- ELEMENTS ---
            const loginScreen = document.getElementById('login-screen');
            const appContent = document.getElementById('app-content');
            const loginForm = document.getElementById('login-form');
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const loginError = document.getElementById('login-error');
            const credentialsUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRpJtN9t83wtntLMUkhBtLOPsSX-bWnHEZq4N3-hlTshJ--JXNRo3B-3XybUt4r1sHWMYsSttn5tp7u/pub?output=csv';
            
            const productRowsContainer = document.getElementById('product-rows');
            const addProductBtn = document.getElementById('addProductBtn');
            const subtotalEl = document.getElementById('subtotal');
            const grandTotalEl = document.getElementById('grandTotal');
            const downloadPdfBtn = document.getElementById('downloadPdfBtn');
            const downloadQuoteBtn = document.getElementById('downloadQuoteBtn');
            const receiptEl = document.getElementById('receipt');
            const saleNumberEl = document.getElementById('saleNumber');
            const receiptTitleEl = document.getElementById('receiptTitle');
            const saleNumberLine = document.getElementById('saleNumberLine');
            const quoteValidityLine = document.getElementById('quoteValidityLine');
            const loadProductsBtn = document.getElementById('loadProductsBtn');
            const googleSheetUrlInput = document.getElementById('googleSheetUrl');
            const loadingStatusEl = document.getElementById('loadingStatus');
            const productListDatalist = document.getElementById('productList');
            const salesApiUrlInput = document.getElementById('salesApiUrl');
            const savingStatusEl = document.getElementById('savingStatus');
            const toggleConfigBtn = document.getElementById('toggleConfigBtn');
            const configSection = document.getElementById('configSection');
            const arrowIcon = document.getElementById('arrowIcon');
            const searchSaleInput = document.getElementById('searchSaleInput');
            const searchSaleBtn = document.getElementById('searchSaleBtn');
            const searchStatusEl = document.getElementById('searchStatus');
            const newSaleBtn = document.getElementById('newSaleBtn');
            const loggedInUserDisplay = document.getElementById('loggedInUserDisplay');
            const configToggleContainer = document.getElementById('config-toggle-container');
            const generateReportBtn = document.getElementById('generateReportBtn');
            const reportModal = document.getElementById('reportModal');
            const reportContent = document.getElementById('reportContent');
            const closeReportModal = document.getElementById('closeReportModal');
            const downloadReportBtn = document.getElementById('downloadReportBtn');
            const reportTitle = document.getElementById('reportTitle');
            const footerText = document.getElementById('footer-text');
            const toggleSearchBtn = document.getElementById('toggleSearchBtn');
            const productSearchSection = document.getElementById('productSearchSection');
            const searchArrowIcon = document.getElementById('searchArrowIcon');
            const productSearchInput = document.getElementById('productSearchInput');
            const productSearchResults = document.getElementById('productSearchResults');
            const refreshProductsBtn = document.getElementById('refreshProductsBtn');
            const productDetailModal = document.getElementById('productDetailModal');
            const modalProductImage = document.getElementById('modalProductImage');
            const modalProductName = document.getElementById('modalProductName');
            const modalProductSku = document.getElementById('modalProductSku');
            const modalProductCode = document.getElementById('modalProductCode');
            const modalProductStock = document.getElementById('modalProductStock');
            const modalProductPrice = document.getElementById('modalProductPrice');
            const modalProductCost = document.getElementById('modalProductCost');
            const modalProductWholesale = document.getElementById('modalProductWholesale');
            const closeProductModal = document.getElementById('closeProductModal');
            const prevMonthSummaryBtn = document.getElementById('prev-month-summary-btn');
            const currentMonthSummaryBtn = document.getElementById('current-month-summary-btn');
            
            // Page containers
            const posPage = document.getElementById('pos-page');
            const registerPage = document.getElementById('register-page');
            const reportsPage = document.getElementById('reports-page');

            // Page navigation buttons
            const showRegisterPageBtn = document.getElementById('showRegisterPageBtn');
            const showReportsPageBtn = document.getElementById('showReportsPageBtn');
            const backToPosBtn = document.getElementById('backToPosBtn');
            const backToPosBtnFromReports = document.getElementById('backToPosBtnFromReports');

            const fullscreenBtn = document.getElementById('fullscreenBtn');
            const fullscreenIcon = document.getElementById('fullscreenIcon');
            const exitFullscreenIcon = document.getElementById('exitFullscreenIcon');
            const mobileMenuBtn = document.getElementById('mobileMenuBtn');
            const headerMenu = document.getElementById('headerMenu');
            const logoutBtn = document.getElementById('logoutBtn');

            // --- CONFIG & STATE ---
            const sessionTimeout = 20 * 60 * 1000; // 20 minutes
            let saleCounter = 1;
            let productsData = [];
            let isReprintMode = false;

            // --- MAIN APP LOGIC ---
            function initializeApp(user) {
                loginScreen.style.display = 'none';
                appContent.style.display = 'flex';
                
                let loggedInUser = user;
                
                loggedInUserDisplay.textContent = loggedInUser;
                footerText.textContent = `© ${new Date().getFullYear()} Arelyshop Bolivia. Todos los derechos reservados.`;

                if (loggedInUser.toLowerCase() === 'admin') {
                    configToggleContainer.style.display = 'block';
                    showRegisterPageBtn.style.display = 'inline-flex';
                    showReportsPageBtn.style.display = 'inline-flex';
                } else {
                    configToggleContainer.style.display = 'none';
                    showRegisterPageBtn.style.display = 'none';
                    showReportsPageBtn.style.display = 'none';
                }

                // --- Page Navigation ---
                function showPage(pageToShow) {
                    posPage.classList.add('hidden');
                    registerPage.classList.add('hidden');
                    if(reportsPage) reportsPage.classList.add('hidden');
                    pageToShow.classList.remove('hidden');
                }

                showRegisterPageBtn.addEventListener('click', () => showPage(registerPage));
                
                showReportsPageBtn.addEventListener('click', () => {
                    showPage(reportsPage);
                    calculateAndDisplaySummary(0); // Show current month by default
                });

                backToPosBtn.addEventListener('click', () => showPage(posPage));
                if(backToPosBtnFromReports) backToPosBtnFromReports.addEventListener('click', () => showPage(posPage));
                
                document.getElementById('logo-home-btn').addEventListener('click', () => showPage(posPage));

                logoutBtn.addEventListener('click', () => {
                    localStorage.removeItem('loggedInUser');
                    localStorage.removeItem('loginTimestamp');
                    location.reload();
                });
                
                mobileMenuBtn.addEventListener('click', () => {
                    headerMenu.classList.toggle('hidden');
                });

                // Hide mobile menu after clicking an option
                headerMenu.addEventListener('click', (e) => {
                    if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                        if (window.innerWidth < 768) { // Tailwind's 'md' breakpoint
                            headerMenu.classList.add('hidden');
                        }
                    }
                });

                fullscreenBtn.addEventListener('click', toggleFullScreen);

                function toggleFullScreen() {
                    const doc = window.document;
                    const docEl = document.documentElement;

                    const requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
                    const cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;

                    if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
                        if (requestFullScreen) {
                            requestFullScreen.call(docEl);
                        }
                    } else {
                        if (cancelFullScreen) {
                            cancelFullScreen.call(doc);
                        }
                    }
                }

                function updateFullscreenIcons() {
                    const doc = window.document;
                    const isFullscreen = doc.fullscreenElement || doc.mozFullScreenElement || doc.webkitFullscreenElement || doc.msFullscreenElement;
                    if (isFullscreen) {
                        fullscreenIcon.classList.add('hidden');
                        exitFullscreenIcon.classList.remove('hidden');
                    } else {
                        fullscreenIcon.classList.remove('hidden');
                        exitFullscreenIcon.classList.add('hidden');
                    }
                }

                document.addEventListener('fullscreenchange', updateFullscreenIcons);
                document.addEventListener('webkitfullscreenchange', updateFullscreenIcons);
                document.addEventListener('mozfullscreenchange', updateFullscreenIcons);
                document.addEventListener('MSFullscreenChange', updateFullscreenIcons);
                
                exitFullscreenIcon.classList.add('hidden');

                toggleConfigBtn.addEventListener('click', () => {
                    configSection.classList.toggle('open');
                    arrowIcon.classList.toggle('rotate-180');
                });
                
                toggleSearchBtn.addEventListener('click', () => {
                    productSearchSection.classList.toggle('open');
                    searchArrowIcon.classList.toggle('rotate-180');
                });
                
                productSearchInput.addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase().trim();
                    if (!searchTerm) {
                        renderSearchResults(productsData);
                        return;
                    }
                    const filteredProducts = productsData.filter(product => 
                        product.name.toLowerCase().includes(searchTerm) || 
                        (product.sku && product.sku.toLowerCase().includes(searchTerm)) ||
                        (product.code && product.code.toLowerCase().includes(searchTerm))
                    );
                    renderSearchResults(filteredProducts);
                });

                const formatCurrency = (value) => {
                    const numberValue = Number(value);
                    if (isNaN(numberValue)) return 'Bs. 0.00';
                    return `Bs. ${numberValue.toLocaleString('es-BO', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                };

                function copyToClipboard(text, btn) {
                    const originalIcon = btn.innerHTML;
                    
                    const textArea = document.createElement("textarea");
                    textArea.value = text;
                    textArea.style.top = "0";
                    textArea.style.left = "0";
                    textArea.style.position = "fixed";

                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();

                    try {
                        const successful = document.execCommand('copy');
                        if (successful) {
                            btn.innerHTML = '¡Copiado!';
                            btn.style.backgroundColor = '#10B981';
                            setTimeout(() => {
                                btn.innerHTML = originalIcon;
                                btn.style.backgroundColor = '';
                            }, 1500);
                        } else {
                           console.error('Fallback copy was unsuccessful');
                        }
                    } catch (err) {
                        console.error('Fallback copy failed: ', err);
                    }

                    document.body.removeChild(textArea);
                }

                function renderSearchResults(products) {
                    productSearchResults.innerHTML = '';
                    if (products.length === 0) {
                        productSearchResults.innerHTML = '<p class="col-span-full text-center text-gray-500">No se encontraron productos.</p>';
                        return;
                    }

                    products.forEach((product, index) => {
                        const card = document.createElement('div');
                        card.className = 'bg-white rounded-lg shadow-md overflow-hidden transform hover:scale-105 transition-transform duration-200 flex flex-col cursor-pointer';
                        card.dataset.index = index;
                        
                        const formattedPrice = formatCurrency(product.price);

                        card.innerHTML = `
                            <img src="${product.photoUrl}" alt="${product.name}" class="w-full h-48 object-cover" onerror="this.onerror=null; this.src='https://placehold.co/400x400/e2e8f0/94a3b8?text=Sin+Imagen';">
                            <div class="p-4 flex-grow flex flex-col">
                                <h3 class="font-bold text-md mb-2 truncate" title="${product.name}">${product.name}</h3>
                                <p class="text-sm text-gray-600">SKU: ${product.sku || 'N/A'}</p>
                                <p class="text-sm text-gray-600">Stock: ${product.quantity}</p>
                                <div class="mt-auto pt-2">
                                    <p class="text-lg font-bold text-blue-600">${formattedPrice}</p>
                                </div>
                            </div>
                        `;
                        productSearchResults.appendChild(card);
                    });
                }
                
                function openProductModal(product) {
                    modalProductImage.src = product.photoUrl;
                    modalProductImage.onerror = () => { modalProductImage.src = 'https://placehold.co/400x400/e2e8f0/94a3b8?text=Sin+Imagen'; };
                    modalProductName.textContent = product.name;
                    modalProductSku.textContent = product.sku || 'N/A';
                    modalProductCode.textContent = product.code || 'N/A';
                    modalProductStock.textContent = product.quantity;
                    modalProductPrice.textContent = formatCurrency(product.price);
                    modalProductCost.textContent = formatCurrency(product.cost);
                    modalProductWholesale.textContent = formatCurrency(product.wholesale);
                    productDetailModal.classList.remove('hidden');
                }
                
                productSearchResults.addEventListener('click', (e) => {
                    const card = e.target.closest('.cursor-pointer');
                    if (!card) return;

                    const productIndex = card.dataset.index;
                    const allProducts = Array.from(productSearchResults.querySelectorAll('.cursor-pointer'));
                    const globalIndex = allProducts.indexOf(card);
                    
                    const searchTerm = productSearchInput.value.toLowerCase().trim();
                    const currentList = searchTerm ? productsData.filter(p => p.name.toLowerCase().includes(searchTerm) || (p.sku && p.sku.toLowerCase().includes(searchTerm)) || (p.code && p.code.toLowerCase().includes(searchTerm))) : productsData;
                    
                    const product = currentList[globalIndex];

                    if (product) {
                        openProductModal(product);
                    }
                });

                closeProductModal.addEventListener('click', () => {
                    productDetailModal.classList.add('hidden');
                });
                
                productDetailModal.addEventListener('click', (e) => {
                    if (e.target === productDetailModal) {
                        productDetailModal.classList.add('hidden');
                    }
                    
                    const copyBtn = e.target.closest('.copy-btn');
                    if (copyBtn) {
                        const copyType = copyBtn.dataset.copyType;
                        let textToCopy = '';
                        if (copyType === 'modal-sku') {
                            textToCopy = modalProductSku.textContent;
                        } else if (copyType === 'modal-code') {
                            textToCopy = modalProductCode.textContent;
                        }
                        copyToClipboard(textToCopy, copyBtn);
                    }
                });


                async function loadProducts() {
                    productSearchInput.value = '';
                    const url = googleSheetUrlInput.value.trim();
                    if (!url) {
                        loadingStatusEl.textContent = 'Por favor, introduce un enlace válido.';
                        loadingStatusEl.style.color = 'red';
                        return;
                    }

                    loadingStatusEl.textContent = 'Cargando productos...';
                    loadingStatusEl.style.color = 'gray';
                    const refreshIcon = refreshProductsBtn.querySelector('svg');
                    
                    refreshProductsBtn.disabled = true;
                    refreshProductsBtn.classList.add('animate-pulse');
                    if(refreshIcon) refreshIcon.classList.add('animate-spin');

                    try {
                        const cacheBustUrl = `${url}&_=${new Date().getTime()}`;
                        const response = await fetch(cacheBustUrl);
                        if (!response.ok) throw new Error('No se pudo cargar la hoja de cálculo.');
                        const csvText = await response.text();
                        
                        const rows = csvText.split('\n').slice(1);
                        productsData = rows.map(row => {
                            const columns = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);
                            if (columns.length >= 8 && columns[0]) {
                                return {
                                    name: (columns[0] || '').trim().replace(/"/g, ''),
                                    price: parseFloat((columns[1] || '0').trim().replace(',', '.')) || 0,
                                    cost: parseFloat((columns[2] || '0').trim().replace(',', '.')) || 0,
                                    wholesale: parseFloat((columns[3] || '0').trim().replace(',', '.')) || 0,
                                    sku: (columns[4] || '').trim().replace(/"/g, ''),
                                    quantity: parseInt((columns[5] || '0').trim()) || 0,
                                    photoUrl: (columns[6] || '').trim().replace(/"/g, ''),
                                    code: (columns[7] || '').trim().replace(/"/g, '')
                                };
                            }
                            return null;
                        }).filter(p => p && p.name);

                        productListDatalist.innerHTML = '';
                        productsData.forEach(product => {
                            const nameOption = document.createElement('option');
                            nameOption.value = product.name;
                            productListDatalist.appendChild(nameOption);
                            if (product.sku) {
                                const skuOption = document.createElement('option');
                                skuOption.value = product.sku;
                                productListDatalist.appendChild(skuOption);
                            }
                            if (product.code) {
                                const codeOption = document.createElement('option');
                                codeOption.value = product.code;
                                productListDatalist.appendChild(codeOption);
                            }
                        });

                        renderSearchResults(productsData); 

                        loadingStatusEl.textContent = `¡${productsData.length} productos cargados exitosamente!`;
                        loadingStatusEl.style.color = 'green';

                    } catch (error) {
                        console.error('Error loading products:', error);
                        loadingStatusEl.textContent = `Error: ${error.message}`;
                        loadingStatusEl.style.color = 'red';
                        renderSearchResults([]);
                    } finally {
                        refreshProductsBtn.disabled = false;
                        refreshProductsBtn.classList.remove('animate-pulse');
                        if(refreshIcon) refreshIcon.classList.remove('animate-spin');
                    }
                }

                loadProductsBtn.addEventListener('click', loadProducts);
                
                refreshProductsBtn.addEventListener('click', async () => {
                    await loadProducts(); 
                    await fetchAndSetSaleNumber();
                    if (!reportsPage.classList.contains('hidden')) {
                        await calculateAndDisplaySummary(0);
                    }
                });


                async function saveSale(saleData) {
                    const apiUrl = salesApiUrlInput.value.trim();
                    if (!apiUrl) {
                        savingStatusEl.textContent = 'No se proporcionó URL para guardar la venta. Se omitió el guardado.';
                        savingStatusEl.style.color = 'orange';
                        return;
                    }
                    
                    savingStatusEl.textContent = 'Guardando venta en Google Sheets...';
                    savingStatusEl.style.color = 'gray';

                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            mode: 'no-cors',
                            cache: 'no-cache',
                            headers: { 'Content-Type': 'text/plain;charset=utf-8' },
                            body: JSON.stringify(saleData),
                            redirect: 'follow'
                        });
                        
                        savingStatusEl.textContent = '¡Venta guardada exitosamente!';
                        savingStatusEl.style.color = 'green';

                    } catch (error) {
                        console.error('Error saving sale:', error);
                        savingStatusEl.textContent = `Error al guardar la venta: ${error.message}`;
                        savingStatusEl.style.color = 'red';
                    }
                }

                async function fetchAndSetSaleNumber() {
                    const apiUrl = salesApiUrlInput.value.trim();
                    if (!apiUrl) {
                        saleNumberEl.textContent = 'URL no configurada';
                        return;
                    }
                    
                    saleNumberEl.textContent = '...';
                    isReprintMode = false;
                    downloadPdfBtn.innerHTML = '<svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path></svg> Generar Venta y Descargar PDF';

                    try {
                        const response = await fetch(apiUrl);
                        if (!response.ok) throw new Error('Respuesta de red no fue OK');
                        const data = await response.json();

                        if (data.result === 'success' && data.nextSaleNumber) {
                            saleCounter = data.nextSaleNumber;
                            saleNumberEl.textContent = saleCounter.toString().padStart(3, '0');
                        } else {
                            throw new Error(data.error || 'Respuesta inesperada del script.');
                        }
                    } catch (error) {
                        console.error('Error fetching sale number:', error);
                        saleNumberEl.textContent = 'Error';
                    }
                }

                searchSaleBtn.addEventListener('click', async () => {
                    const saleNumberToSearch = searchSaleInput.value.trim();
                    const apiUrl = salesApiUrlInput.value.trim();
                    if (!saleNumberToSearch || !apiUrl) {
                        searchStatusEl.textContent = 'Por favor, introduce un número de venta y configura la URL.';
                        searchStatusEl.style.color = 'red';
                        return;
                    }

                    searchStatusEl.textContent = `Buscando venta Nro. ${saleNumberToSearch}...`;
                    searchStatusEl.style.color = 'gray';
                    
                    const searchUrl = `${apiUrl}?searchSaleNumber=${saleNumberToSearch}`;

                    try {
                        const response = await fetch(searchUrl);
                        if (!response.ok) throw new Error('Error en la red al buscar.');
                        const data = await response.json();

                        if (data.result === 'success' && data.saleData) {
                            populateReceiptWithData(data.saleData);
                            searchStatusEl.textContent = `Venta ${saleNumberToSearch} cargada. Lista para reimprimir.`;
                            searchStatusEl.style.color = 'green';
                            isReprintMode = true;
                            downloadPdfBtn.innerHTML = '<svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path></svg> Reimprimir PDF';
                        } else {
                            throw new Error(data.error || 'Venta no encontrada.');
                        }
                    } catch (error) {
                        console.error('Error searching for sale:', error);
                        searchStatusEl.textContent = `Error: ${error.message}`;
                        searchStatusEl.style.color = 'red';
                    }
                });

                function populateReceiptWithData(data) {
                    document.getElementById('clientName').value = data.clientName;
                    document.getElementById('clientPhone').value = data.clientPhone;
                    document.getElementById('clientNit').value = data.clientNit;
                    saleNumberEl.textContent = data.saleNumber.toString().padStart(3, '0');
                    document.getElementById('currentDate').textContent = data.saleDate;

                    productRowsContainer.innerHTML = '';
                    data.items.forEach(item => {
                        const row = addRow();
                        row.querySelector('.quantity').value = item.quantity;
                        row.querySelector('.product-name').value = item.productName;
                        row.querySelector('.sku').value = item.sku || '';
                        row.querySelector('.code').value = item.code || '';
                        row.querySelector('.unit-cost').value = item.unitCost;
                        row.querySelector('.discount').value = item.discount || 0;
                    });
                    updateTotals();
                }

                const setDisplayDate = () => {
                    const today = new Date();
                    const day = today.getDate().toString().padStart(2, '0');
                    const month = (today.getMonth() + 1).toString().padStart(2, '0'); // Month is 0-indexed
                    const year = today.getFullYear();
                    document.getElementById('currentDate').textContent = `${day}/${month}/${year}`;
                };

                setDisplayDate();

                const updateTotals = () => {
                    let subtotal = 0;
                    const rows = productRowsContainer.querySelectorAll('tr');
                    rows.forEach(row => {
                        const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
                        const unitCost = parseFloat(row.querySelector('.unit-cost').value) || 0;
                        const discount = parseFloat(row.querySelector('.discount').value) || 0;

                        const rowTotalValue = (quantity * unitCost) * (1 - discount / 100);
                        row.querySelector('.row-total').textContent = formatCurrency(rowTotalValue);
                        subtotal += rowTotalValue;
                    });

                    subtotalEl.textContent = formatCurrency(subtotal);
                    grandTotalEl.textContent = formatCurrency(subtotal);
                };

                const addRow = () => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-2 py-2"><input type="number" class="quantity" value="1" min="1"></td>
                        <td class="px-2 py-2"><input type="text" class="product-name" placeholder="Nombre, SKU o Código" list="productList"></td>
                        <td class="px-2 py-2"><input type="text" class="sku bg-gray-100" placeholder="SKU" readonly></td>
                        <td class="px-2 py-2"><input type="text" class="code bg-gray-100" placeholder="Código" readonly></td>
                        <td class="px-2 py-2"><input type="number" class="unit-cost" placeholder="0.00" step="0.01"></td>
                        <td class="px-2 py-2"><input type="number" class="discount" value="0" min="0" max="100" step="1" oninput="this.value = Math.round(this.value);"></td>
                        <td class="px-2 py-2 text-right row-total font-medium">${formatCurrency(0)}</td>
                        <td class="px-2 py-2 text-center action-col"><button class="delete-row-btn">X</button></td>
                    `;
                    productRowsContainer.appendChild(row);
                    return row;
                };

                productRowsContainer.addEventListener('input', (e) => {
                    if (e.target.classList.contains('product-name')) {
                        const inputValue = e.target.value;
                        const selectedProduct = productsData.find(p => p.name === inputValue || p.sku === inputValue || p.code === inputValue);
                        if (selectedProduct) {
                            const row = e.target.closest('tr');
                            row.querySelector('.product-name').value = selectedProduct.name;
                            row.querySelector('.sku').value = selectedProduct.sku;
                            row.querySelector('.code').value = selectedProduct.code;
                            row.querySelector('.unit-cost').value = selectedProduct.price;
                            
                            if (row === productRowsContainer.lastElementChild) {
                                addRow();
                            }
                        }
                    }
                    
                    if (e.target.matches('.quantity, .unit-cost, .discount, .product-name')) {
                        updateTotals();
                    }
                });

                productRowsContainer.addEventListener('click', (e) => {
                    if (e.target.classList.contains('delete-row-btn')) {
                        e.target.closest('tr').remove();
                        updateTotals();
                    }
                });

                addProductBtn.addEventListener('click', addRow);

                function generatePdf({ isQuote = false, isReprint = false }) {
                    const clientName = document.getElementById('clientName').value || 'sin-nombre';
                    const currentSaleNumber = saleNumberEl.textContent;
                    
                    const docType = isQuote ? 'Cotizacion' : 'Nota_Venta';
                    const fileName = `${docType}_${currentSaleNumber}_${clientName.replace(/ /g, '_')}.pdf`;

                    const originalTitle = receiptTitleEl.textContent;
                    receiptTitleEl.textContent = isQuote ? 'Cotización' : 'Nota de Venta';
                    if (isQuote) {
                        saleNumberLine.style.display = 'none';
                        quoteValidityLine.style.display = 'block';
                    }

                    const saleItems = [];
                    const rows = productRowsContainer.querySelectorAll('tr');
                    rows.forEach(row => {
                        const productName = row.querySelector('.product-name').value;
                        const sku = row.querySelector('.sku').value;
                        const code = row.querySelector('.code').value;
                        const quantity = parseFloat(row.querySelector('.quantity').value) || 0;
                        const unitCost = parseFloat(row.querySelector('.unit-cost').value) || 0;
                        const discount = parseFloat(row.querySelector('.discount').value) || 0;
                        const grossTotal = quantity * unitCost;
                        const discountAmount = grossTotal * (discount / 100);
                        const total = grossTotal - discountAmount;

                        if (productName && quantity > 0) {
                            saleItems.push({
                                productName, sku, code, quantity, unitCost, discount, total, grossTotal, discountAmount
                            });
                        }
                    });

                    const saleData = {
                        saleNumber: parseInt(currentSaleNumber, 10),
                        clientName: clientName,
                        clientPhone: document.getElementById('clientPhone').value,
                        clientNit: document.getElementById('clientNit').value,
                        seller: loggedInUser,
                        items: saleItems
                    };

                    const originalWidth = receiptEl.style.width;
                    receiptEl.style.width = '1024px';

                    const actionCols = document.querySelectorAll('.action-col');
                    actionCols.forEach(col => col.style.display = 'none');
                    addProductBtn.style.display = 'none';
                    const inputs = receiptEl.querySelectorAll('input[type="text"], input[type="number"]');
                    inputs.forEach(input => {
                        const span = document.createElement('span');
                        span.className = 'pdf-text-replacement';
                        span.textContent = input.value;
                        input.style.display = 'none';
                        input.parentNode.insertBefore(span, input.nextSibling);
                    });

                    html2canvas(receiptEl, { scale: 2, useCORS: true }).then(canvas => {
                        const { jsPDF } = window.jspdf;
                        const imgData = canvas.toDataURL('image/jpeg', 0.8);
                        const pdf = new jsPDF({ orientation: 'p', unit: 'mm', format: 'letter' });
                        
                        const margin = 10;
                        const pdfWidth = pdf.internal.pageSize.getWidth();
                        const contentWidth = pdfWidth - (margin * 2);
                        const imgHeight = (canvas.height * contentWidth) / canvas.width;
                        
                        pdf.addImage(imgData, 'JPEG', margin, margin, contentWidth, imgHeight);
                        pdf.save(fileName);
                        
                        if (!isQuote && !isReprint) {
                            const now = new Date();
                            const day = now.getDate().toString().padStart(2, '0');
                            const month = (now.getMonth() + 1).toString().padStart(2, '0');
                            const year = now.getFullYear();
                            saleData.saleDate = `${day}/${month}/${year}`;

                            saveSale(saleData).then(() => {
                                fetchAndSetSaleNumber();
                            });
                        }

                    }).catch(err => {
                        console.error("Error generating PDF:", err);
                    }).finally(() => {
                        receiptEl.style.width = originalWidth;
                        actionCols.forEach(col => col.style.display = '');
                        addProductBtn.style.display = '';
                        document.querySelectorAll('.pdf-text-replacement').forEach(span => span.remove());
                        inputs.forEach(input => input.style.display = '');
                        receiptTitleEl.textContent = originalTitle;
                        if (isQuote) {
                            saleNumberLine.style.display = '';
                            quoteValidityLine.style.display = 'none';
                        }
                    });
                }

                downloadQuoteBtn.addEventListener('click', () => generatePdf({ isQuote: true }));
                downloadPdfBtn.addEventListener('click', () => generatePdf({ isReprint: isReprintMode }));

                async function calculateAndDisplaySummary(monthOffset = 0) {
                    // Update button styles
                    if (monthOffset === 0) {
                        currentMonthSummaryBtn.classList.add('bg-blue-500', 'text-white');
                        currentMonthSummaryBtn.classList.remove('bg-gray-200', 'text-gray-800');
                        prevMonthSummaryBtn.classList.add('bg-gray-200', 'text-gray-800');
                        prevMonthSummaryBtn.classList.remove('bg-blue-500', 'text-white');
                    } else {
                        prevMonthSummaryBtn.classList.add('bg-blue-500', 'text-white');
                        prevMonthSummaryBtn.classList.remove('bg-gray-200', 'text-gray-800');
                        currentMonthSummaryBtn.classList.add('bg-gray-200', 'text-gray-800');
                        currentMonthSummaryBtn.classList.remove('bg-blue-500', 'text-white');
                    }

                    const monthNames = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
                    const date = new Date();
                    date.setMonth(date.getMonth() + monthOffset);
                    const targetMonth = date.getMonth();
                    const targetYear = date.getFullYear();
                    document.getElementById('summary-month-name').textContent = monthNames[targetMonth];

                    document.getElementById('summary-total-sales').textContent = 'Calculando...';
                    document.getElementById('summary-total-profit').textContent = 'Calculando...';
                    document.getElementById('summary-top-products').innerHTML = '<li>Calculando...</li>';

                    const reportUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRbTygg27iAywnMrh1dNsLRpnrWnC_NKh3wQva2FLZC2Wpb4Lo7csg8kDHtEjc9C-ictRVCdc86l8OT/pub?output=csv';

                    try {
                        if (productsData.length === 0 || !productsData[0].hasOwnProperty('cost')) {
                            await loadProducts();
                        }

                        const response = await fetch(reportUrl);
                        if (!response.ok) throw new Error('No se pudo cargar el reporte de ventas.');
                        const csvText = await response.text();

                        const rows = csvText.split('\n').slice(1);
                        const allSalesData = rows.map(row => {
                            const columns = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/);
                            if (columns.length < 14) return null;
                            
                            const discountPercent = parseFloat((columns[10] || '0').trim().replace(',', '.')) || 0;
                            let saleTotal;

                            if (discountPercent > 0) {
                                saleTotal = parseFloat((columns[11] || '0').trim().replace(',', '.')); // L: Total CON descuento
                            } else {
                                saleTotal = parseFloat((columns[13] || '0').trim().replace(',', '.')); // N: Total SIN descuento
                            }

                            return {
                                date: columns[0].trim(),
                                saleNumber: parseInt(columns[1].trim(), 10),
                                sku: columns[5].trim(),
                                productName: columns[7].trim(),
                                quantity: parseInt(columns[8].trim(), 10),
                                totalProduct: saleTotal
                            };
                        }).filter(item => item && item.date && !isNaN(item.saleNumber) && !isNaN(item.totalProduct));

                        const parseDDMMYYYY = (dateString) => {
                            if (!dateString || typeof dateString !== 'string') return null;
                            const parts = dateString.split('/');
                            if (parts.length !== 3) return null;
                            const day = parseInt(parts[0], 10);
                            const month = parseInt(parts[1], 10) - 1;
                            const year = parseInt(parts[2], 10);
                            if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
                                const d = new Date(year, month, day);
                                if (d.getFullYear() === year && d.getMonth() === month && d.getDate() === day) {
                                    return d;
                                }
                            }
                            return null;
                        };

                        const currentMonthSales = allSalesData.filter(item => {
                            const saleDate = parseDDMMYYYY(item.date);
                            return saleDate && saleDate.getMonth() === targetMonth && saleDate.getFullYear() === targetYear;
                        });

                        if (currentMonthSales.length === 0) {
                            document.getElementById('summary-total-sales').textContent = 'Bs. 0.00';
                            document.getElementById('summary-total-profit').textContent = 'Bs. 0.00';
                            document.getElementById('summary-top-products').innerHTML = '<li>Sin registros para este mes.</li>';
                            return;
                        }

                        let totalSales = 0;
                        let totalProfit = 0;
                        const productQuantities = {};

                        currentMonthSales.forEach(item => {
                            totalSales += item.totalProduct;
                            let productInfo = productsData.find(p => p.sku === item.sku && p.sku.trim() !== '') || productsData.find(p => p.name === item.productName);
                            const cost = productInfo ? productInfo.cost : 0;
                            const itemCost = cost * item.quantity;
                            totalProfit += (item.totalProduct - itemCost);

                            if (productQuantities[item.productName]) {
                                productQuantities[item.productName] += item.quantity;
                            } else {
                                productQuantities[item.productName] = item.quantity;
                            }
                        });

                        const sortedProducts = Object.entries(productQuantities)
                            .sort(([, a], [, b]) => b - a)
                            .slice(0, 5);

                        document.getElementById('summary-total-sales').textContent = formatCurrency(totalSales);
                        document.getElementById('summary-total-profit').textContent = formatCurrency(totalProfit);
                        
                        const topProductsList = document.getElementById('summary-top-products');
                        topProductsList.innerHTML = '';
                        if (sortedProducts.length > 0) {
                            sortedProducts.forEach(([name, quantity]) => {
                                const li = document.createElement('li');
                                li.textContent = `${name} - (${quantity} vendidos)`;
                                topProductsList.appendChild(li);
                            });
                        } else {
                            topProductsList.innerHTML = '<li>No hay datos suficientes.</li>';
                        }

                    } catch (error) {
                        console.error("Error calculating monthly summary:", error);
                        document.getElementById('summary-total-sales').textContent = 'Error';
                        document.getElementById('summary-total-profit').textContent = 'Error';
                        document.getElementById('summary-top-products').innerHTML = '<li>Error al cargar datos.</li>';
                    }
                }

                currentMonthSummaryBtn.addEventListener('click', () => calculateAndDisplaySummary(0));
                prevMonthSummaryBtn.addEventListener('click', () => calculateAndDisplaySummary(-1));

                if(generateReportBtn) {
                    generateReportBtn.addEventListener('click', async () => {
                        const startDateStr = document.getElementById('startDate').value;
                        const endDateStr = document.getElementById('endDate').value;
                        
                        if (!startDateStr || !endDateStr) {
                            alert('Por favor, selecciona un rango de fechas.');
                            return;
                        }

                        const startDate = new Date(`${startDateStr}T00:00:00`);
                        const endDate = new Date(`${endDateStr}T23:59:59`);

                        reportTitle.textContent = `Reporte de ventas Arelyshop (${startDateStr} a ${endDateStr})`;
                        reportContent.innerHTML = '<p class="text-center">Generando reporte...</p>';
                        reportModal.classList.remove('hidden');

                        const reportUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRbTygg27iAywnMrh1dNsLRpnrWnC_NKh3wQva2FLZC2Wpb4Lo7csg8kDHtEjc9C-ictRVCdc86l8OT/pub?output=csv';

                        try {
                            if (productsData.length === 0 || !productsData[0].hasOwnProperty('cost')) {
                                await loadProducts();
                            }

                            const response = await fetch(reportUrl);
                            if (!response.ok) throw new Error('Error en la red al generar el reporte.');
                            const csvText = await response.text();
                            
                            const rows = csvText.split('\n').slice(1);
                            const allSalesData = rows.map(row => {
                                const columns = row.split(/,(?=(?:(?:[^"]*"){2})*[^"]*$)/); // Use robust regex
                                if (columns.length < 14) return null;
                                
                                const discountPercent = parseFloat((columns[10] || '0').trim().replace(',', '.')) || 0;
                                let saleTotal;

                                if (discountPercent > 0) {
                                    saleTotal = parseFloat((columns[11] || '0').trim().replace(',', '.')); // L: Total CON descuento
                                } else {
                                    saleTotal = parseFloat((columns[13] || '0').trim().replace(',', '.')); // N: Total SIN descuento
                                }

                                return {
                                    date: columns[0].trim(),
                                    saleNumber: parseInt(columns[1].trim(), 10),
                                    sku: columns[5].trim(),
                                    productName: columns[7].trim(),
                                    quantity: parseInt(columns[8].trim(), 10),
                                    totalProduct: saleTotal
                                };
                            }).filter(item => item && item.date && !isNaN(item.saleNumber) && !isNaN(item.totalProduct));

                            const parseDDMMYYYY = (dateString) => {
                                if (!dateString || typeof dateString !== 'string') return null;
                                const parts = dateString.split('/');
                                if (parts.length !== 3) return null;

                                const day = parseInt(parts[0], 10);
                                const month = parseInt(parts[1], 10) - 1; // JS months are 0-11
                                const year = parseInt(parts[2], 10);

                                if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
                                    const d = new Date(year, month, day);
                                    if (d.getFullYear() === year && d.getMonth() === month && d.getDate() === day) {
                                        return d;
                                    }
                                }
                                return null;
                            };

                            const filteredData = allSalesData.filter(item => {
                                const saleDate = parseDDMMYYYY(item.date);
                                if (!saleDate) {
                                    console.warn("Formato de fecha inválido omitido (se esperaba DD/MM/AAAA):", item.date);
                                    return false;
                                }
                                return saleDate >= startDate && saleDate <= endDate;
                            });

                            if (filteredData.length === 0) {
                                reportContent.innerHTML = '<p class="text-center text-gray-500">No se encontraron ventas en el rango de fechas seleccionado.</p>';
                            } else {
                                displayReport(filteredData);
                            }

                        } catch (error) {
                            reportContent.innerHTML = `<p class="text-center text-red-500">Error: ${error.message}</p>`;
                        }
                    });
                }


                function displayReport(data) {
                    let totalSales = 0;
                    let totalCost = 0;

                    const tableRows = data.map(item => {
                        let productInfo = null;
                        
                        if (item.sku && item.sku.trim() !== '') {
                            productInfo = productsData.find(p => p.sku === item.sku);
                        }
                        
                        if (!productInfo) {
                            productInfo = productsData.find(p => p.name === item.productName);
                        }

                        const cost = productInfo ? productInfo.cost : 0;
                        const itemCost = cost * item.quantity;
                        const profit = item.totalProduct - itemCost;
                        
                        totalSales += item.totalProduct;
                        totalCost += itemCost;

                        return `
                            <tr>
                                <td class="border px-4 py-2">${item.date}</td>
                                <td class="border px-4 py-2">${item.saleNumber}</td>
                                <td class="border px-4 py-2">${item.sku || 'N/A'}</td>
                                <td class="border px-4 py-2">${item.productName}</td>
                                <td class="border px-4 py-2 text-center">${item.quantity}</td>
                                <td class="border px-4 py-2 text-right">${formatCurrency(item.totalProduct)}</td>
                                <td class="border px-4 py-2 text-right">${formatCurrency(itemCost)}</td>
                                <td class="border px-4 py-2 text-right font-semibold ${profit >= 0 ? 'text-green-600' : 'text-red-600'}">${formatCurrency(profit)}</td>
                            </tr>
                        `;
                    }).join('');

                    const totalProfit = totalSales - totalCost;
                    
                    reportContent.innerHTML = `
                        <table id="reportTable" class="w-full text-sm text-left text-gray-500">
                            <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                                <tr>
                                    <th class="px-4 py-3">Fecha</th>
                                    <th class="px-4 py-3">Nr. Venta</th>
                                    <th class="px-4 py-3">SKU</th>
                                    <th class="px-4 py-3">Producto</th>
                                    <th class="px-4 py-3 text-center">Cant.</th>
                                    <th class="px-4 py-3 text-right">Venta Total</th>
                                    <th class="px-4 py-3 text-right">Costo Total</th>
                                    <th class="px-4 py-3 text-right">Ganancia</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${tableRows}
                            </tbody>
                            <tfoot class="font-bold text-gray-800 bg-gray-100">
                                <tr>
                                    <td colspan="5" class="border px-4 py-2 text-right">TOTALES</td>
                                    <td class="border px-4 py-2 text-right">${formatCurrency(totalSales)}</td>
                                    <td class="border px-4 py-2 text-right">${formatCurrency(totalCost)}</td>
                                    <td class="border px-4 py-2 text-right text-lg ${totalProfit >= 0 ? 'text-green-700' : 'text-red-700'}">${formatCurrency(totalProfit)}</td>
                                </tr>
                            </tfoot>
                        </table>
                    `;
                }
                
                downloadReportBtn.addEventListener('click', () => {
                    const { jsPDF } = window.jspdf;
                    const doc = new jsPDF({
                        orientation: 'portrait',
                        unit: 'mm',
                        format: 'letter'
                    });

                    const startDate = document.getElementById('startDate').value;
                    const endDate = document.getElementById('endDate').value;
                    const fileName = `Reporte_Ventas_${startDate}_a_${endDate}.pdf`;
                    
                    const mainTitle = "Reporte de ventas Arelyshop";
                    const dateSubTitle = `Desde: ${startDate} Hasta: ${endDate}`;

                    // Add titles
                    doc.setFontSize(18);
                    doc.text(mainTitle, 14, 20);
                    doc.setFontSize(11);
                    doc.text(dateSubTitle, 14, 28);

                    // Extract data and generate table
                    doc.autoTable({
                        html: '#reportTable',
                        startY: 32,
                        theme: 'grid',
                        headStyles: {
                            fillColor: [22, 160, 133], // A nice green color
                            textColor: 255
                        },
                        footStyles: {
                            fillColor: [240, 240, 240],
                            textColor: 0,
                            fontStyle: 'bold'
                        },
                        columnStyles: {
                            4: { halign: 'center' }, // Cant.
                            5: { halign: 'right' }, // Venta Total
                            6: { halign: 'right' }, // Costo Total
                            7: { halign: 'right' }  // Ganancia
                        },
                        didParseCell: function (data) {
                            // Right align the footer 'TOTALES' label
                            if (data.row.section === 'foot' && data.column.dataKey === 4) {
                                data.cell.styles.halign = 'right';
                            }
                        }
                    });

                    doc.save(fileName);
                });


                closeReportModal.addEventListener('click', () => {
                    reportModal.classList.add('hidden');
                });

                function resetForNewSale() {
                    document.getElementById('clientName').value = '';
                    document.getElementById('clientPhone').value = '';
                    document.getElementById('clientNit').value = '';
                    productRowsContainer.innerHTML = '';
                    addRow();
                    updateTotals();
                    fetchAndSetSaleNumber();
                    setDisplayDate();
                    searchStatusEl.textContent = '';
                }

                newSaleBtn.addEventListener('click', resetForNewSale);

                fetchAndSetSaleNumber();
                addRow();
                loadProducts();

                const productForm = document.getElementById('product-form');
                const statusMessage = document.getElementById('status-message');
                const submitButton = document.getElementById('submit-button');
                const googleScriptURL = 'https://script.google.com/macros/s/AKfycbxL3O1CzkW4MAGsFNU1Wv-yjuPDh5zgG1rN16EwZGl1gyjiGFy4PHEjqWzlS0hedC0hFQ/exec';

                productForm.addEventListener('submit', function(e) {
                    e.preventDefault(); 
                    submitButton.disabled = true;
                    submitButton.textContent = 'Registrando...';

                    const formData = new FormData(productForm);
                    const data = {};
                    formData.forEach((value, key) => {
                        if (key === 'precio' || key === 'compra' || key === 'mayoreo' || key === 'cantidad') {
                            data[key] = parseFloat(value) || 0;
                        } else {
                            data[key] = value;
                        }
                    });

                    fetch(googleScriptURL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'text/plain;charset=utf-8',
                        },
                        body: JSON.stringify(data),
                    })
                    .then(res => res.json())
                    .then(response => {
                        console.log('Respuesta del servidor:', response);
                        if (response.result === 'success') {
                            showStatusMessage('¡Producto registrado con éxito!', 'success');
                            productForm.reset(); 
                        } else {
                            showStatusMessage(`Error: ${response.error}`, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error al enviar el formulario:', error);
                        showStatusMessage('Error de conexión o de script. Revisa la consola (F12) para más detalles.', 'error');
                    })
                    .finally(() => {
                        submitButton.disabled = false;
                        submitButton.textContent = 'Registrar Producto';
                    });
                });

                function showStatusMessage(message, type) {
                    statusMessage.textContent = message;
                    statusMessage.className = 'mt-6 p-4 text-center rounded-lg opacity-100 ';
                    if (type === 'success') {
                        statusMessage.classList.add('bg-green-100', 'text-green-800');
                    } else {
                        statusMessage.classList.add('bg-red-100', 'text-red-800');
                    }

                    setTimeout(() => {
                        statusMessage.style.opacity = '0';
                    }, 5000);
                }
            }

            // --- SESSION CHECK ON STARTUP ---
            function checkSession() {
                const savedUser = localStorage.getItem('loggedInUser');
                const loginTimestamp = localStorage.getItem('loginTimestamp');

                if (savedUser && loginTimestamp) {
                    const currentTime = new Date().getTime();
                    if (currentTime - loginTimestamp < sessionTimeout) {
                        initializeApp(savedUser);
                    } else {
                        localStorage.removeItem('loggedInUser');
                        localStorage.removeItem('loginTimestamp');
                        setupLoginForm();
                    }
                } else {
                    setupLoginForm();
                }
            }

            function setupLoginForm() {
                loginForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    loginError.textContent = 'Verificando...';
                    const username = usernameInput.value.trim();
                    const password = passwordInput.value.trim();

                    try {
                        const response = await fetch(credentialsUrl);
                        if (!response.ok) throw new Error('No se pudo cargar la lista de usuarios.');
                        const csvText = await response.text();
                        const rows = csvText.split('\n').slice(1);
                        const users = rows.map(row => {
                            const columns = row.split(',');
                            return { user: columns[0].trim(), pass: columns[1].trim() };
                        });

                        const foundUser = users.find(u => u.user === username && u.pass === password);

                        if (foundUser) {
                            localStorage.setItem('loggedInUser', foundUser.user);
                            localStorage.setItem('loginTimestamp', new Date().getTime());
                            initializeApp(foundUser.user);
                        } else {
                            loginError.textContent = 'Usuario o contraseña incorrectos.';
                        }
                    } catch (error) {
                        loginError.textContent = `Error de red: ${error.message}`;
                    }
                });
            }

            checkSession();
        });
    </script>
</body>
</html>
